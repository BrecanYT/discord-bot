import { NameArg } from "../types";
import BaseArg, { ArgParseResponse } from "./base";
declare type FlagOpts = {
    short?: string;
    storeFalse?: boolean;
};
export declare type FlagArgs = [...args: NameArg, long: string, opts?: FlagOpts];
/** Returns 'true' if it matches a flag anywhere in the text like '--help' or '-h' (long and short version respectively). */
export declare class FlagArg<T = boolean> extends BaseArg<T> {
    isFlag: boolean;
    long: string;
    short?: string;
    storeFalse: boolean;
    constructor(...[name, long, opts]: FlagArgs);
    parse(text: string): ArgParseResponse<T>;
    help(): string;
    example(): string;
}
/** Returns 'true' if it matches the help flag anywhere in the text ('--help' or '-h'). */
export declare class HelpFlagArg extends FlagArg {
    constructor();
}
export {};
