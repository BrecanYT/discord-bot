import { NameArg } from "../types";
export declare type ArgParseResponse<T> = [T, string];
export declare type BaseArgs = NameArg;
export declare type ValidateIndexArgs = [argIndex: number, argCount: number];
/** The core 'arg' class which others must inherit from and implement. */
export default class BaseArg<T> {
    /** The name of the argument seen by end users via the help flag and in errors. */
    name: string;
    constructor(...[name]: BaseArgs);
    /** Parses as string for the next argument and returns the parsed value and remaining text. */
    parse(_: string): ArgParseResponse<T>;
    /** Returns the help syntax seen by end users via the help flag and in errors. */
    help(): string;
    /** Returns an example of this argument as seen by end users via the help flag. */
    example(): string;
    validateArg(): void;
    /** (Optional) Validate the position of the arg. This should throw an error upon failure. */
    validateIndex(..._: ValidateIndexArgs): void;
}
