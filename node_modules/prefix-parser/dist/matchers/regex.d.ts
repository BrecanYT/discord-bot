import { NameArg } from "../types";
import BaseArg, { ArgParseResponse } from "./base";
declare type RegexOpts = {
    group?: number;
};
export declare type RegexArgs = [...args: NameArg, regex: RegExp, example: string, opts?: RegexOpts];
/** A generic regex parser which can match regex and extract a single regex group. */
export declare class RegexArg<T = string> extends BaseArg<T> {
    private _example;
    private regex;
    private group;
    /**
     * @param name - The name of the command.
     * @param regex - The regex to match with. Everything matched by this expression will be discarded and not accessible by remaining argument parsers.
     * @param group - The index of a regex group to return. The
     */
    constructor(...[name, regex, example, opts]: RegexArgs);
    parse(text: string): ArgParseResponse<T>;
    help(): string;
    /** Returns an example of this argument as seen by end users via the help flag. */
    example(): string;
}
export {};
