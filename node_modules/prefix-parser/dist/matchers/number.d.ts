import { NameArg } from "../types";
import BaseArg, { ArgParseResponse } from "./base";
declare type NumberOpts = {
    min?: number;
    max?: number;
    float?: boolean;
};
declare type NumberArgs = [...args: NameArg, opts?: NumberOpts];
declare type MinMaxArgs = [...args: NameArg, opts?: {
    min?: number;
    max?: number;
}];
export declare type IntegerArgs = MinMaxArgs;
export declare type FloatArgs = MinMaxArgs;
/** Matches the next valid number using 'parseInt' and 'parseFloat' for the respective type. */
declare class NumberArg<T = number> extends BaseArg<T> {
    min?: number;
    max?: number;
    float: boolean;
    constructor(...[name, opts]: NumberArgs);
    parse(text: string): ArgParseResponse<T>;
    help(): string;
    example(): string;
}
/** Matches an integer. Numbers like '12.34' will be converted to an int like '12'. */
export declare class IntegerArg extends NumberArg {
    constructor(...[name, opts]: IntegerArgs);
}
/** Matches a float. */
export declare class FloatArg extends NumberArg {
    constructor(...[name, opts]: FloatArgs);
    example(): string;
}
export {};
