"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WordsArg = exports.RestArg = exports.TextArg = void 0;
const utils_1 = require("../utils");
const base_1 = __importDefault(require("./base"));
const regex_1 = require("./regex");
/**
 * Matches as much text as possible including characters a-z, spaces, - and _.
 *
 * @example
 * const args = prefix('!cmd').text('name').parse('!cmd Jim Bob! is my name')
 * console.log(args) // 'Jim Bob'
 */
class TextArg extends regex_1.RegexArg {
    constructor(...[name]) {
        super(name, /[a-zA-Z_-\s]+/, utils_1.loremIpsum(2));
    }
    help() {
        return `${this.name} {text}`;
    }
}
exports.TextArg = TextArg;
/**
 * Matches all remaining text including all characters.
 *
 * @example
 * const args = prefix('!cmd').text('name').parse('!cmd Jim Bob!')
 * console.log(args) // 'Jim Bob! is my name'
 */
class RestArg extends base_1.default {
    parse(text) {
        if (!text.length)
            throw Error("Text cannot be empty");
        return [text, ""];
    }
    validateIndex(...[argIndex, argCount]) {
        if (argIndex !== (argCount - 1))
            throw Error(`'${this.name}' must be the last argument`);
    }
    help() {
        return `${this.name} {remaining}`;
    }
    example() {
        return utils_1.loremIpsum(2);
    }
}
exports.RestArg = RestArg;
/**
 * Matches on one more words separated by spaces and that contain characters a-z, 0-9, and _.
 *
 * @example
 * const args = prefix('!cmd').word('name').parse('!cmd Jim Bob rules')
 * console.log(args) // 'Jim'
 *
 * args = prefix('!cmd').words('name', 2).parse('!cmd Jim Bob rules')
 * console.log(args) // 'Jim Bob'
 */
class WordsArg extends regex_1.RegexArg {
    constructor(...[name, opts = {}]) {
        const { words = 1 } = opts;
        const _words = utils_1.intArg(words);
        const regex = [...new Array(_words)].map(_ => '\\w+').join('\\s+'); // regex words separated by spaces e.g. /\w+\s+\w+/
        super(name, new RegExp(regex), utils_1.loremIpsum(words));
        this.words = _words;
        utils_1.assertGreaterThan(_words, 0);
    }
    parse(text) {
        try {
            return super.parse(text);
        }
        catch (error) {
            const s = this.words === 1 ? '' : 's';
            throw Error(`${this.words} word${s} not found`);
        }
    }
    help() {
        const s = this.words === 1 ? '' : 's';
        return `${this.name} {${this.words} word${s}}`;
    }
    example() {
        return utils_1.loremIpsum(this.words);
    }
}
exports.WordsArg = WordsArg;
