import { NameArg } from "../types";
import BaseArg, { ArgParseResponse, ValidateIndexArgs } from "./base";
import { RegexArg } from "./regex";
export declare type TextArgs = NameArg;
export declare type WordArgs = NameArg;
export declare type FluentWordsArgs = [...args: NameArg, count?: number];
declare type WordsOpts = {
    words?: number;
};
export declare type WordsArgs = [...args: NameArg, opts?: WordsOpts];
/**
 * Matches as much text as possible including characters a-z, spaces, - and _.
 *
 * @example
 * const args = prefix('!cmd').text('name').parse('!cmd Jim Bob! is my name')
 * console.log(args) // 'Jim Bob'
 */
export declare class TextArg<T = string> extends RegexArg<T> {
    constructor(...[name]: TextArgs);
    help(): string;
}
/**
 * Matches all remaining text including all characters.
 *
 * @example
 * const args = prefix('!cmd').text('name').parse('!cmd Jim Bob!')
 * console.log(args) // 'Jim Bob! is my name'
 */
export declare class RestArg<T = string> extends BaseArg<T> {
    parse(text: string): ArgParseResponse<T>;
    validateIndex(...[argIndex, argCount]: ValidateIndexArgs): void;
    help(): string;
    example(): string;
}
/**
 * Matches on one more words separated by spaces and that contain characters a-z, 0-9, and _.
 *
 * @example
 * const args = prefix('!cmd').word('name').parse('!cmd Jim Bob rules')
 * console.log(args) // 'Jim'
 *
 * args = prefix('!cmd').words('name', 2).parse('!cmd Jim Bob rules')
 * console.log(args) // 'Jim Bob'
 */
export declare class WordsArg<T = string> extends RegexArg<T> {
    private words;
    constructor(...[name, opts]: WordsArgs);
    parse(text: string): ArgParseResponse<T>;
    help(): string;
    example(): string;
}
export {};
