"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpFlagArg = exports.FlagArg = void 0;
const utils_1 = require("../utils");
const base_1 = __importDefault(require("./base"));
/** Returns 'true' if it matches a flag anywhere in the text like '--help' or '-h' (long and short version respectively). */
class FlagArg extends base_1.default {
    constructor(...[name, long, opts = {}]) {
        super(name);
        this.isFlag = true;
        const { short, storeFalse = false } = opts;
        this.long = long.toLowerCase();
        this.storeFalse = storeFalse;
        // Assert long command is in the form of "--command"
        const longMatch = this.long.match(/^--[a-z]{2,}$/);
        utils_1.assert(!!(longMatch && longMatch.length && longMatch[0] === long), `Long command '${long}' must be in the form --command and have 2+ characters`);
        // Assert short command is in the form of "-cmd" (up to 3 letters)
        if (short) {
            this.short = short;
            const shortMatch = short.toLowerCase().match(/^-[a-z]{1,3}$/);
            utils_1.assert(!!(shortMatch && shortMatch.length && shortMatch[0] === short), `Short command '${short}' must be in the form -cmd and have 1-3 characters`);
        }
    }
    parse(text) {
        const longWord = this.long.split('-').join('');
        const shortWord = this.short ? this.short.split('-').join('') : "";
        const longMatch = text.match(new RegExp(`(^|\\s)--${longWord}($|\\s)`));
        const shortMatch = text.match(new RegExp(`(^|\\s)-${shortWord}($|\\s)`));
        const resultIfSet = !this.storeFalse;
        if (longMatch && longMatch.length === 3) {
            const [match, start, end] = longMatch;
            const rest = text.replace(match, start + end); // replace word only and not adjacent spaces
            return [resultIfSet, rest];
        }
        if (this.short && shortMatch && shortMatch.length === 3) {
            const [match, start, end] = shortMatch;
            const rest = text.replace(match, start + end); // replace word only and not adjacent spaces
            return [resultIfSet, rest];
        }
        return [!resultIfSet, text];
    }
    help() {
        const command = [this.long, this.short].filter(x => !!x).join('/');
        return `${this.name} {${command}}`;
    }
    example() {
        return this.long;
    }
}
exports.FlagArg = FlagArg;
/** Returns 'true' if it matches the help flag anywhere in the text ('--help' or '-h'). */
class HelpFlagArg extends FlagArg {
    constructor() {
        super("Help", "--help", { short: "-h" });
    }
}
exports.HelpFlagArg = HelpFlagArg;
