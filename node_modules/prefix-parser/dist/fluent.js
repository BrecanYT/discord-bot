"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscordPrefixParserFluentInterface = void 0;
const flag_1 = require("./matchers/flag");
const mention_1 = require("./matchers/mention");
const number_1 = require("./matchers/number");
const regex_1 = require("./matchers/regex");
const text_1 = require("./matchers/text");
/**
 * Wraps the {@link DiscordPrefixParser} class to provide an easy to use fluent interface.
 * @example
 * const [args, error] = prefix('!cmd', 'My command')
 *     .int("Age")
 *     .float("Height")
 *     .text("Name")
 *     .parse("!cmd 20 1.8 Jim Bob")
 * console.log(args) // [20, 1.8, 'Jim Bob']
 */
class DiscordPrefixParserFluentInterface {
    constructor(parser) {
        this.parser = parser;
    }
    add(...args) {
        this.parser.add(...args);
        return this;
    }
    /**
     * Parses a Discord message and tries to parse it argument values.
     * @param text - The Discord message to try parse against the added arguments.
     * @returns An array with values [<args>, <error>].
     *      <args> - 'null' if arguments were not parsed, or an array of parsed argument values of the same length and order of the added arguments.
     *      <error> - 'null' if no error was thrown, or an error message that should be sent to the end user to help them correct and retry the command.
     */
    parse(text) {
        let args = null, error = null;
        try {
            args = this.parser.parse(text);
        }
        catch (e) {
            error = e.message;
        }
        return [args, error];
    }
    help() {
        return this.parser.help();
    }
    usage() {
        return this.parser.usage();
    }
    example() {
        return this.parser.example();
    }
    int(...args) {
        this.parser.add(new number_1.IntegerArg(...args));
        return this;
    }
    float(...args) {
        this.parser.add(new number_1.FloatArg(...args));
        return this;
    }
    rest(...args) {
        this.parser.add(new text_1.RestArg(...args));
        return this;
    }
    text(...args) {
        this.parser.add(new text_1.TextArg(...args));
        return this;
    }
    word(...args) {
        this.parser.add(new text_1.WordsArg(...args));
        return this;
    }
    words(...[name, words = 1]) {
        this.parser.add(new text_1.WordsArg(name, { words }));
        return this;
    }
    regex(...args) {
        this.parser.add(new regex_1.RegexArg(...args));
        return this;
    }
    user(...args) {
        this.parser.add(new mention_1.DiscordUserMentionArg(...args));
        return this;
    }
    role(...args) {
        this.parser.add(new mention_1.DiscordRoleMentionArg(...args));
        return this;
    }
    channel(...args) {
        this.parser.add(new mention_1.DiscordChannelMentionArg(...args));
        return this;
    }
    flag(...args) {
        this.parser.add(new flag_1.FlagArg(...args));
        return this;
    }
}
exports.DiscordPrefixParserFluentInterface = DiscordPrefixParserFluentInterface;
