import { FlagArgs } from "./matchers/flag";
import { MentionArgs } from "./matchers/mention";
import { FloatArgs, IntegerArgs } from "./matchers/number";
import { RegexArgs } from "./matchers/regex";
import { FluentWordsArgs, TextArgs, WordArgs } from "./matchers/text";
import { DiscordPrefixParser } from "./prefix";
import { Arr, MapToBaseArg } from "./types";
declare type Update<Args extends Arr> = DiscordPrefixParserFluentInterface<Args>;
declare type Extend<Args extends Arr, T> = Update<[...Args, T]>;
/**
 * Wraps the {@link DiscordPrefixParser} class to provide an easy to use fluent interface.
 * @example
 * const [args, error] = prefix('!cmd', 'My command')
 *     .int("Age")
 *     .float("Height")
 *     .text("Name")
 *     .parse("!cmd 20 1.8 Jim Bob")
 * console.log(args) // [20, 1.8, 'Jim Bob']
 */
export declare class DiscordPrefixParserFluentInterface<Args extends Arr = []> {
    private parser;
    constructor(parser: DiscordPrefixParser<Args>);
    add<NewArgs extends Arr>(...args: MapToBaseArg<NewArgs>): Update<[...Args, ...NewArgs]>;
    /**
     * Parses a Discord message and tries to parse it argument values.
     * @param text - The Discord message to try parse against the added arguments.
     * @returns An array with values [<args>, <error>].
     *      <args> - 'null' if arguments were not parsed, or an array of parsed argument values of the same length and order of the added arguments.
     *      <error> - 'null' if no error was thrown, or an error message that should be sent to the end user to help them correct and retry the command.
     */
    parse(text: string): [Args | null, string | null];
    help(): string;
    usage(): string;
    example(): string;
    int(...args: IntegerArgs): Extend<Args, number>;
    float(...args: FloatArgs): Extend<Args, number>;
    rest(...args: TextArgs): Extend<Args, string>;
    text(...args: TextArgs): Extend<Args, string>;
    word(...args: WordArgs): Extend<Args, string>;
    words(...[name, words]: FluentWordsArgs): Extend<Args, string>;
    regex(...args: RegexArgs): Extend<Args, string>;
    user(...args: MentionArgs): Extend<Args, string>;
    role(...args: MentionArgs): Extend<Args, string>;
    channel(...args: MentionArgs): Extend<Args, string>;
    flag(...args: FlagArgs): Extend<Args, boolean>;
}
export {};
