import { Arr, MapToBaseArg } from "./types";
export declare type PrefixParserArgs = [command: string, name?: string];
declare type Extend<Args extends Arr, T extends Arr> = DiscordPrefixParser<[...Args, ...T]>;
/**
 * Parses Discord messages into Javascript values.
 * It handles argument validation and provides messages to help the Discord user format the command correctly.
 *
 * It works by taking an array of 'arguments' which represent various types like @mentions, numbers, text.
 * Each argument is then run through the parser which tries to find the matching variable.
 * If all variables are found then it returns the argument values as an array with the correct JS types.
 * If an error is thrown then a helpful message is returned that can be sent to the Discord user to help them format the command correctly.
 *
 * @example
 * const builder = new DiscordPrefixParser('!cmd')
 * builder.addArg(new IntegerArg("Age"))
 * builder.addArg(new FloatArg("Height"))
 * builder.addArg(new StringArg("Name"))
 * const args = builder.parse("!cmd 20 1.8 Jim Bob")
 * console.log(args) // [20, 1.8, 'Jim Bob']
 */
export declare class DiscordPrefixParser<Args extends Arr = []> {
    private prefix;
    private name?;
    private args;
    constructor(...[prefix, name]: PrefixParserArgs);
    add<NewArgs extends Arr>(...args: MapToBaseArg<NewArgs>): Extend<Args, NewArgs>;
    /**
     * Parses a Discord message and tries to parse it argument values.
     * @param text - The Discord message to try parse against the added arguments.
     * @returns 'null' if the command isn't the prefix command, or an array of parsed argument values of the same length and order of the added arguments.
     * @throws A string error that can be sent to end users to help them correct the command and try again.
     */
    parse(text: string): Args | null;
    help(): string;
    /**
     * Returns a Discord compatible message with the command and title (if provided).
     * @example **`!rate` Rate your friends!**
     */
    title(): string;
    /**
     * Returns a Discord compatible message describing the command usage.
     * @example !rate `User {@user}` `Score {int}`
     */
    usage(): string;
    /**
     * Returns a Discord compatible message with a valid example of the command.
     * @example !rate @user 50
     */
    example(): string;
    private splitFlagArgs;
}
export {};
