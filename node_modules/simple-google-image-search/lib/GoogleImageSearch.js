"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleImageSearch = void 0;
const axios_1 = require("axios");
class GoogleImageSearch {
    constructor(apiKey, searchEngineId) {
        this.apiKey = apiKey;
        this.searchEngineId = searchEngineId;
    }
    getImageUrls(searchString) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield axios_1.default.get(`https://www.googleapis.com/customsearch/v1?key=${this.apiKey}&q=
    ${searchString}&cx=${this.searchEngineId}&searchType=image&enableImageSearch=true`);
                if (((_b = (_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.items) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                    return res.data.items.map(it => it.link);
                }
                else {
                    return 'No image found.';
                }
            }
            catch (err) {
                return err;
            }
        });
    }
    getImageUrl(searchString) {
        return __awaiter(this, void 0, void 0, function* () {
            const urls = yield this.getImageUrls(searchString);
            return Array.isArray(urls) ? urls[0] : urls;
        });
    }
}
exports.GoogleImageSearch = GoogleImageSearch;
